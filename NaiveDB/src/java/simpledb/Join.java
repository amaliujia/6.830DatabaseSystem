package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private OpIterator leftIter;
    private OpIterator rightIter;
    private JoinPredicate joinPredicate;

    private Tuple curLeft = null;
    private Tuple curRight = null;
    private boolean open = false;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        joinPredicate = p;
        leftIter = child1;
        rightIter = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return leftIter.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return rightIter.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(leftIter.getTupleDesc(), rightIter.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        leftIter.open();
        rightIter.open();

        curLeft = null;
        curRight = null;
        super.open();
    }

    public void close() {
        // some code goes here
        leftIter.close();
        rightIter.close();

        curLeft = null;
        curRight = null;
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        leftIter.rewind();
        rightIter.rewind();
        curLeft = null;
        curRight = null;

    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // if left child operator returns nothing or right
        // child operator returns nothing, should return null
        if ((curLeft == null && !leftIter.hasNext()) ||
                curRight == null && !rightIter.hasNext()) {
            return null;
        }


        // if this is the first call, then initialize left tuple.
        if (curLeft == null && leftIter.hasNext()) {
            curLeft = leftIter.next();
        }

        // if this is the first call, then initialize right tuple.
        if (curRight == null && rightIter.hasNext()) {
            curRight = rightIter.next();
        }

        Tuple ret = null;
        while (true) {
            if (joinPredicate.filter(curLeft, curRight)) {
                ret = Tuple.merge(curLeft, curRight);
            }

            if (rightIter.hasNext()) {
                curRight = rightIter.next();
            } else {
                if (!leftIter.hasNext()) {
                    curLeft = null;
                    curRight = null;
                    break;
                } else {
                    rightIter.rewind();
                    // no need to check if right iterator is empty
                    // as have checked it at the beginning of function.
                    curRight = rightIter.next();
                    curLeft = leftIter.next();
                }
            }

            if (ret != null) {
                break;
            }
        }
        return ret;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{leftIter, rightIter};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        leftIter = children[0];
        rightIter = children[1];
    }

}
